// Hi·ªÉn th·ªã h·ªì s∆° learner chi ti·∫øt
function renderLearnerProfile() {
  const profile = document.getElementById('learnerProfile');
  if (!profile || !learner) return;
  
  profile.innerHTML = `
    <div class="profile-item">
      <span class="profile-label">H·ªç t√™n:</span>
      <span class="profile-value">${learner.name}</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">Email:</span>
      <span class="profile-value">${learner.email}</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">S·ªë ƒëi·ªán tho·∫°i:</span>
      <span class="profile-value">${learner.phone}</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">ƒê·ªãa ch·ªâ:</span>
      <span class="profile-value">${learner.address}</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">Ng√†y tham gia:</span>
      <span class="profile-value">${formatDate(learner.joinDate)}</span>
    </div>
  `;
}

// C·∫≠p nh·∫≠t th√¥ng tin header
function updateHeaderInfo() {
  if (!learner) return;
  
  const userAvatar = document.getElementById('userAvatar');
  const userGreeting = document.getElementById('userGreeting');
  const userRole = document.getElementById('userRole');
  
  if (userAvatar) userAvatar.textContent = learner.avatar;
  if (userGreeting) userGreeting.textContent = `Xin ch√†o, ${learner.name}!`;
  if (userRole) userRole.textContent = `Sinh vi√™n VƒÉn Lang - ${learner.grade}`;
}

// C·∫≠p nh·∫≠t th·ªëng k√™ l·ªãch h·ªçc
function updateScheduleStats() {
  if (!learner || !statistics) return;
  
  const totalHours = document.getElementById('totalHours');
  const completedLessons = document.getElementById('completedLessons');
  const totalSubjects = document.getElementById('totalSubjects');
  const onlineMeetings = document.getElementById('onlineMeetings');
  
  if (totalHours) totalHours.textContent = statistics.totalHours;
  if (completedLessons) completedLessons.textContent = learner.completedLessons;
  if (totalSubjects) totalSubjects.textContent = learner.currentSubjects.length;
  
  // ƒê·∫øm s·ªë bu·ªïi online
  const onlineCount = schedule ? schedule.filter(lesson => lesson.onlineMeeting).length : 0;
  if (onlineMeetings) onlineMeetings.textContent = onlineCount;
}

// C·∫≠p nh·∫≠t th·ªëng k√™ ƒëi·ªÉm s·ªë
function updateScoreStats() {
  if (!statistics) return;
  
  const averageGPA = document.getElementById('averageGPA');
  const improvementRate = document.getElementById('improvementRate');
  
  if (averageGPA) averageGPA.textContent = statistics.averageGPA;
  if (improvementRate) improvementRate.textContent = `+${statistics.improvementRate}% so v·ªõi th√°ng tr∆∞·ªõc`;
}

// C·∫≠p nh·∫≠t form c√†i ƒë·∫∑t
function updateSettingsForms() {
  if (!learner) return;
  
  const profileName = document.getElementById('profileName');
  const profileEmail = document.getElementById('profileEmail');
  const profilePhone = document.getElementById('profilePhone');
  const profileGrade = document.getElementById('profileGrade');
  const profileSchool = document.getElementById('profileSchool');
  const profileAddress = document.getElementById('profileAddress');
  const currentAvatarDisplay = document.getElementById('currentAvatarDisplay');
  
  if (profileName) profileName.value = learner.name;
  if (profileEmail) profileEmail.value = learner.email;
  if (profilePhone) profilePhone.value = learner.phone;
  if (profileGrade) profileGrade.value = learner.grade;
  if (profileSchool) profileSchool.value = learner.school;
  if (profileAddress) profileAddress.value = learner.address;
  if (currentAvatarDisplay) currentAvatarDisplay.textContent = learner.avatar;
}

// Hi·ªÉn th·ªã th√¥ng tin h·ªçc t·∫≠p
function renderAcademicInfo() {
  const academicInfo = document.getElementById('academicInfo');
  if (!academicInfo || !learner) return;
  
  academicInfo.innerHTML = `
    <div class="profile-item">
      <span class="profile-label">L·ªõp:</span>
      <span class="profile-value">${learner.grade}</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">Tr∆∞·ªùng:</span>
      <span class="profile-value">${learner.school}</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">M√¥n h·ªçc hi·ªán t·∫°i:</span>
      <span class="profile-value">${learner.currentSubjects.join(', ')}</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">L·ªãch h·ªçc ∆∞a th√≠ch:</span>
      <span class="profile-value">${learner.preferredSchedule.join(' | ')}</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">T·ªïng bu·ªïi h·ªçc:</span>
      <span class="profile-value">${learner.totalLessons} bu·ªïi</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">Bu·ªïi ƒë√£ ho√†n th√†nh:</span>
      <span class="profile-value">${learner.completedLessons} bu·ªïi</span>
    </div>
  `;
}

// Hi·ªÉn th·ªã th√¥ng tin li√™n h·ªá kh·∫©n c·∫•p
function renderEmergencyContact() {
  const emergencyContact = document.getElementById('emergencyContact');
  if (!emergencyContact || !learner.emergencyContact) return;
  
  emergencyContact.innerHTML = `
    <div class="profile-item">
      <span class="profile-label">T√™n:</span>
      <span class="profile-value">${learner.emergencyContact.name}</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">Quan h·ªá:</span>
      <span class="profile-value">${learner.emergencyContact.relationship}</span>
    </div>
    <div class="profile-item">
      <span class="profile-label">S·ªë ƒëi·ªán tho·∫°i:</span>
      <span class="profile-value">${learner.emergencyContact.phone}</span>
    </div>
  `;
}

// Hi·ªÉn th·ªã l·ªãch h·ªçc
function renderSchedule() {
  const scheduleList = document.getElementById('scheduleList');
  if (!scheduleList || !schedule) return;
  
  if (!schedule.length) {
    scheduleList.innerHTML = '<p class="no-data">Ch∆∞a c√≥ l·ªãch h·ªçc n√†o.</p>';
    return;
  }
  
  scheduleList.innerHTML = schedule.map(lesson => `
    <div class="schedule-item ${lesson.status}">
      <div class="schedule-date">
        <div class="date">${formatDate(lesson.date)}</div>
        <div class="time">${lesson.time}</div>
        <div class="meeting-type">${lesson.meetingType}</div>
      </div>
      <div class="schedule-info">
        <div class="subject">${lesson.subject}</div>
        <div class="tutor">Gia s∆∞: ${lesson.tutor}</div>
        <div class="notes">${lesson.notes}</div>
        ${lesson.onlineMeeting ? '<div class="online-indicator">üñ•Ô∏è Bu·ªïi h·ªçc online</div>' : ''}
      </div>
      <div class="schedule-status">
        <span class="status-badge ${lesson.status}">
          ${lesson.status === 'completed' ? 'ƒê√£ ho√†n th√†nh' : 'S·∫Øp t·ªõi'}
        </span>
        ${lesson.onlineMeeting && lesson.status === 'upcoming' ? 
          `<button class="btn-join-meeting" onclick="checkDeviceAndJoinMeeting('${lesson.meetingLink}')">Tham gia meeting</button>` : ''}
      </div>
    </div>
  `).join('');
}

// Hi·ªÉn th·ªã danh s√°ch tutor v·ªõi th√¥ng tin chi ti·∫øt
function renderTutors(list) {
  const tutorList = document.getElementById('tutorList');
  if (!tutorList) return;
  
  if (!list.length) {
    tutorList.innerHTML = '<p class="no-data">Kh√¥ng t√¨m th·∫•y gia s∆∞ ph√π h·ª£p.</p>';
    return;
  }
  
  tutorList.innerHTML = list.map(t => `
    <div class="tutor-card">
      <div class="tutor-header">
        <div class="tutor-avatar">${t.avatar}</div>
        <div class="tutor-info">
          <div class="tutor-name">${t.name}</div>
          <div class="tutor-subject">${t.subject}</div>
          <div class="tutor-meeting-type">
            <span class="meeting-badge ${t.meetingType}">${t.meetingType}</span>
            ${t.onlineSupport ? '<span class="online-badge">üñ•Ô∏è Online</span>' : ''}
          </div>
        </div>
        <div class="tutor-status ${t.status}">
          ${t.status === 'busy' ? 'ƒêang b·∫≠n' : 'ƒêang r·∫£nh'}
        </div>
      </div>
      <div class="tutor-details">
        <div class="tutor-rating">
          <span class="stars">${'‚òÖ'.repeat(Math.floor(t.rating))}${'‚òÜ'.repeat(5-Math.floor(t.rating))}</span>
          <span class="rating-text">${t.rating}/5 (${t.students} h·ªçc sinh)</span>
        </div>
        <div class="tutor-price">${t.price.toLocaleString()}ƒë/bu·ªïi</div>
        <div class="tutor-desc">${t.desc}</div>
      </div>
      <div class="tutor-actions">
        <button class="btn-primary" onclick="bookTutor(${t.id})">ƒê·∫∑t l·ªãch</button>
        <button class="btn-secondary" onclick="viewTutorDetail(${t.id})">Chi ti·∫øt</button>
        ${t.onlineSupport ? `<button class="btn-online" onclick="checkDeviceAndJoinMeeting(${t.id})">Tham gia meeting</button>` : ''}
      </div>
    </div>
  `).join('');
}

// Hi·ªÉn th·ªã ti·∫øn ƒë·ªô theo m√¥n h·ªçc
function renderSubjectProgress() {
  const subjectProgress = document.getElementById('subjectProgress');
  if (!subjectProgress || !statistics.subjects) return;
  
  subjectProgress.innerHTML = statistics.subjects.map(subject => `
    <div class="subject-progress-item">
      <div class="subject-name">${subject.name}</div>
      <div class="progress-bar">
        <div class="progress-fill" style="width: ${(subject.gpa / 4.0) * 100}%"></div>
      </div>
      <div class="subject-score">
        <span class="score">${subject.gpa}</span>
        <span class="grade">(${subject.grade})</span>
        <span class="improvement">+${subject.improvement}%</span>
      </div>
    </div>
  `).join('');
}

// Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ti·∫øn ƒë·ªô
function renderProgressChart() {
  const progressChart = document.getElementById('progressChart');
  if (!progressChart || !statistics.monthlyProgress) return;
  
  const maxGPA = Math.max(...statistics.monthlyProgress.map(item => item.gpa));
  const maxHours = Math.max(...statistics.monthlyProgress.map(item => item.hours));
  
  progressChart.innerHTML = `
    <div class="chart-container">
      <div class="chart-bars">
        ${statistics.monthlyProgress.map(item => `
          <div class="chart-bar">
            <div class="bar-score" style="height: ${(item.gpa / maxGPA) * 100}%"></div>
            <div class="bar-hours" style="height: ${(item.hours / maxHours) * 100}%"></div>
            <div class="bar-label">${item.month}</div>
          </div>
        `).join('')}
      </div>
      <div class="chart-legend">
        <div class="legend-item">
          <div class="legend-color score-color"></div>
          <span>GPA (${statistics.monthlyProgress[statistics.monthlyProgress.length - 1]?.gpa || 0})</span>
        </div>
        <div class="legend-item">
          <div class="legend-color hours-color"></div>
          <span>Gi·ªù h·ªçc (${statistics.monthlyProgress[statistics.monthlyProgress.length - 1]?.hours || 0})</span>
        </div>
      </div>
    </div>
  `;
}

// Hi·ªÉn th·ªã danh s√°ch ƒë√°nh gi√°
function renderReviews() {
  const reviewsList = document.getElementById('reviewsList');
  if (!reviewsList || !reviews) return;
  
  if (!reviews.length) {
    reviewsList.innerHTML = '<p class="no-data">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</p>';
    return;
  }
  
  reviewsList.innerHTML = reviews.map(review => `
    <div class="review-item">
      <div class="review-header">
        <div class="review-tutor">${review.tutorName} - ${review.subject}</div>
        <div class="review-date">${formatDate(review.date)}</div>
      </div>
      <div class="review-rating">
        ${'‚òÖ'.repeat(review.rating)}${'‚òÜ'.repeat(5-review.rating)}
      </div>
      <div class="review-comment">${review.comment}</div>
    </div>
  `).join('');
}

// Ki·ªÉm tra thi·∫øt b·ªã v√† tham gia meeting
function checkDeviceAndJoinMeeting(meetingLink) {
  // Ki·ªÉm tra camera
  navigator.mediaDevices.getUserMedia({ video: true })
    .then(function(stream) {
      stream.getTracks().forEach(track => track.stop());
      // Ki·ªÉm tra microphone
      return navigator.mediaDevices.getUserMedia({ audio: true });
    })
    .then(function(stream) {
      stream.getTracks().forEach(track => track.stop());
      // N·∫øu c·∫£ camera v√† mic ƒë·ªÅu ho·∫°t ƒë·ªông
      joinMeeting(meetingLink);
    })
    .catch(function(err) {
      alert('Vui l√≤ng cho ph√©p truy c·∫≠p camera v√† microphone ƒë·ªÉ tham gia meeting!');
      console.log('L·ªói thi·∫øt b·ªã:', err);
    });
}

// Tham gia meeting
function joinMeeting(meetingLink) {
  if (confirm('B·∫°n c√≥ mu·ªën tham gia meeting kh√¥ng?')) {
    window.open(meetingLink, '_blank');
  }
}

// Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªë GPA
function renderGPADistribution() {
  const gpaDistribution = document.getElementById('gpaDistribution');
  if (!gpaDistribution || !statistics.gpaDistribution) return;
  
  const maxCount = Math.max(...statistics.gpaDistribution.map(item => item.count));
  
  gpaDistribution.innerHTML = `
    <div class="gpa-chart">
      ${statistics.gpaDistribution.map(item => `
        <div class="gpa-bar-item">
          <div class="gpa-grade">${item.grade}</div>
          <div class="gpa-bar">
            <div class="gpa-bar-fill" style="height: ${(item.count / maxCount) * 100}%"></div>
          </div>
          <div class="gpa-count">${item.count}</div>
          <div class="gpa-percentage">${item.percentage}%</div>
        </div>
      `).join('')}
    </div>
  `;
}

// C·∫≠p nh·∫≠t h√†m filterTutors ƒë·ªÉ h·ªó tr·ª£ l·ªçc theo h√¨nh th·ª©c h·ªçc
function filterTutors() {
  const statusFilter = document.getElementById('filterStatus').value;
  const meetingTypeFilter = document.getElementById('filterMeetingType').value;
  const nameFilter = document.getElementById('filterName').value.toLowerCase();
  const subjectFilter = document.getElementById('filterSubject').value.toLowerCase();
  const priceFilter = parseFloat(document.getElementById('filterPrice').value) || 0;
  
  let filteredTutors = tutors.filter(tutor => {
    const statusMatch = !statusFilter || tutor.status === statusFilter;
    const meetingTypeMatch = !meetingTypeFilter || tutor.meetingType === meetingTypeFilter;
    const nameMatch = !nameFilter || tutor.name.toLowerCase().includes(nameFilter);
    const subjectMatch = !subjectFilter || tutor.subject.toLowerCase().includes(subjectFilter);
    const priceMatch = !priceFilter || tutor.price <= priceFilter;
    
    return statusMatch && meetingTypeMatch && nameMatch && subjectMatch && priceMatch;
  });
  
  renderTutors(filteredTutors);
}

// G·∫Øn s·ª± ki·ªán ƒë√°nh gi√° sao
function attachStarRating() {
  const stars = document.querySelectorAll('.star');
  let selectedRating = 0;
  
  stars.forEach(star => {
    star.addEventListener('click', function() {
      const rating = parseInt(this.dataset.rating);
      selectedRating = rating;
      
      stars.forEach((s, index) => {
        if (index < rating) {
          s.classList.add('active');
        } else {
          s.classList.remove('active');
        }
      });
    });
  });
}

// G·∫Øn s·ª± ki·ªán form ƒë√°nh gi√°
function attachReviewForm() {
  const reviewForm = document.getElementById('reviewForm');
  if (reviewForm) {
    reviewForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const tutor = document.getElementById('reviewTutor').value;
      const comment = document.getElementById('reviewComment').value;
      const rating = document.querySelectorAll('.star.active').length;
      
      if (!tutor || !comment || rating === 0) {
        alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë√°nh gi√°!');
        return;
      }
      
      // Th√™m ƒë√°nh gi√° m·ªõi
      const newReview = {
        id: reviews.length + 1,
        tutorName: tutor,
        subject: tutor.split(' - ')[1] || '',
        rating: rating,
        comment: comment,
        date: new Date().toISOString().split('T')[0]
      };
      
      reviews.push(newReview);
      renderReviews();
      
      // Reset form
      reviewForm.reset();
      document.querySelectorAll('.star').forEach(s => s.classList.remove('active'));
      
      alert('ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
    });
  }
}

// G·∫Øn s·ª± ki·ªán form c√†i ƒë·∫∑t
function attachSettingsForms() {
  const profileForm = document.getElementById('profileForm');
  const academicForm = document.getElementById('academicForm');
  
  if (profileForm) {
    profileForm.addEventListener('submit', function(e) {
      e.preventDefault();
      alert('Th√¥ng tin c√° nh√¢n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');
    });
  }
  
  if (academicForm) {
    academicForm.addEventListener('submit', function(e) {
      e.preventDefault();
      alert('Th√¥ng tin h·ªçc t·∫≠p ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');
    });
  }
}

// G·∫Øn s·ª± ki·ªán t·ª± ƒë·ªông l·ªçc khi nh·∫≠p
function attachFilterEvents() {
  document.getElementById('filterStatus').onchange = filterTutors;
  document.getElementById('filterMeetingType').onchange = filterTutors;
  document.getElementById('filterName').oninput = filterTutors;
  document.getElementById('filterSubject').oninput = filterTutors;
  document.getElementById('filterPrice').oninput = filterTutors;
}

// Chuy·ªÉn tab nav
function attachNavEvents() {
  const navLinks = document.querySelectorAll('.nav a');
  navLinks.forEach(link => {
    link.onclick = function(e) {
      e.preventDefault();
      navLinks.forEach(l => l.classList.remove('active'));
      this.classList.add('active');
      document.querySelectorAll('.section').forEach(sec => sec.style.display = 'none');
      const id = this.getAttribute('href').replace('#','');
      document.getElementById(id).style.display = 'block';
    }
  });
  // M·∫∑c ƒë·ªãnh ch·ªâ hi·ªÉn th·ªã h·ªì s∆°
  document.querySelectorAll('.section').forEach((sec,i) => sec.style.display = i===0?'block':'none');
}

// C√°c h√†m ti·ªán √≠ch
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('vi-VN');
}

function bookTutor(tutorId) {
  alert('Ch·ª©c nƒÉng ƒë·∫∑t l·ªãch s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!');
}

function viewTutorDetail(tutorId) {
  alert('Ch·ª©c nƒÉng xem chi ti·∫øt s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn!');
}

// Thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán
function changeAvatar(newAvatar) {
  if (!learner) return;
  
  // C·∫≠p nh·∫≠t avatar trong d·ªØ li·ªáu
  learner.avatar = newAvatar;
  
  // C·∫≠p nh·∫≠t hi·ªÉn th·ªã
  const currentAvatarDisplay = document.getElementById('currentAvatarDisplay');
  const userAvatar = document.getElementById('userAvatar');
  
  if (currentAvatarDisplay) currentAvatarDisplay.textContent = newAvatar;
  if (userAvatar) userAvatar.textContent = newAvatar;
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i selected
  document.querySelectorAll('.avatar-option').forEach(option => {
    option.classList.remove('selected');
    if (option.dataset.avatar === newAvatar) {
      option.classList.add('selected');
    }
  });
  
  // L∆∞u v√†o localStorage
  localStorage.setItem('userAvatar', newAvatar);
  
  alert('·∫¢nh ƒë·∫°i di·ªán ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');
}

// Hi·ªÉn th·ªã modal ƒë·ªïi m·∫≠t kh·∫©u
function changePassword() {
  const modal = document.getElementById('passwordModal');
  if (modal) {
    modal.classList.add('show');
  }
}

// ƒê√≥ng modal ƒë·ªïi m·∫≠t kh·∫©u
function closePasswordModal() {
  const modal = document.getElementById('passwordModal');
  if (modal) {
    modal.classList.remove('show');
    // Reset form
    document.getElementById('passwordForm').reset();
  }
}

// X·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u
function handlePasswordChange(e) {
  e.preventDefault();
  
  const currentPassword = document.getElementById('currentPassword').value;
  const newPassword = document.getElementById('newPassword').value;
  const confirmPassword = document.getElementById('confirmPassword').value;
  
  // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i (trong th·ª±c t·∫ø s·∫Ω ki·ªÉm tra v·ªõi server)
  if (currentPassword !== 'password123') {
    alert('M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng!');
    return;
  }
  
  // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi
  if (newPassword.length < 6) {
    alert('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!');
    return;
  }
  
  if (newPassword !== confirmPassword) {
    alert('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!');
    return;
  }
  
  // L∆∞u m·∫≠t kh·∫©u m·ªõi (trong th·ª±c t·∫ø s·∫Ω g·ª≠i l√™n server)
  localStorage.setItem('userPassword', newPassword);
  
  alert('M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!');
  closePasswordModal();
}

// ƒêƒÉng xu·∫•t
function logout() {
  if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?')) {
    // X√≥a d·ªØ li·ªáu ng∆∞·ªùi d√πng kh·ªèi localStorage
    localStorage.removeItem('userAvatar');
    localStorage.removeItem('userPassword');
    
    // Chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
    window.location.href = './index.html';
  }
}

// G·∫Øn s·ª± ki·ªán cho avatar options
function attachAvatarEvents() {
  const avatarOptions = document.querySelectorAll('.avatar-option');
  avatarOptions.forEach(option => {
    option.addEventListener('click', function() {
      const selectedAvatar = this.dataset.avatar;
      changeAvatar(selectedAvatar);
    });
  });
  
  // ƒê√°nh d·∫•u avatar hi·ªán t·∫°i
  if (learner) {
    avatarOptions.forEach(option => {
      if (option.dataset.avatar === learner.avatar) {
        option.classList.add('selected');
      }
    });
  }
}

// G·∫Øn s·ª± ki·ªán form ƒë·ªïi m·∫≠t kh·∫©u
function attachPasswordForm() {
  const passwordForm = document.getElementById('passwordForm');
  if (passwordForm) {
    passwordForm.addEventListener('submit', handlePasswordChange);
  }
  
  // ƒê√≥ng modal khi click b√™n ngo√†i
  const modal = document.getElementById('passwordModal');
  if (modal) {
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closePasswordModal();
      }
    });
  }
}

// Hi·ªÉn th·ªã th√¥ng b√°o t·ª´ localStorage
function renderLearnerNotifications() {
  const notiList = document.getElementById('learnerNotifications');
  if (!notiList) return;
  let notifications = JSON.parse(localStorage.getItem('learnerNotifications') || '[]');
  if (notifications.length === 0) {
    notiList.innerHTML = '<p>Kh√¥ng c√≥ th√¥ng b√°o m·ªõi.</p>';
    return;
  }
  notiList.innerHTML = notifications.map(n => `<div class="notification-item">${n.time}: ${n.message}</div>`).join('');
}

// Kh·ªüi t·∫°o
window.onload = function() {
  // Kh√¥i ph·ª•c avatar t·ª´ localStorage n·∫øu c√≥
  const savedAvatar = localStorage.getItem('userAvatar');
  if (savedAvatar && learner) {
    learner.avatar = savedAvatar;
  }
  
  updateHeaderInfo();
  updateScheduleStats();
  updateScoreStats();
  updateSettingsForms();
  
  renderLearnerProfile();
  renderAcademicInfo();
  renderEmergencyContact();
  renderSchedule();
  renderTutors(tutors);
  renderSubjectProgress();
  renderProgressChart();
  renderGPADistribution();
  renderReviews();
  
  attachFilterEvents();
  attachNavEvents();
  attachStarRating();
  attachReviewForm();
  attachSettingsForms();
  attachAvatarEvents();
  attachPasswordForm();
  renderLearnerNotifications();
}

document.addEventListener('DOMContentLoaded', function() {
  const swapBtn = document.getElementById('swapRoleBtn');
  if (swapBtn) {
    swapBtn.onclick = function() {
      window.location.href = 'tutor-dashboard.html';
    };
  }
}); 